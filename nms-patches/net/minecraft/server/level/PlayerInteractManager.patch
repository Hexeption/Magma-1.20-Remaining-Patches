
@@ -235,10 +319,65 @@
 
     public boolean destroyBlock(BlockPosition blockposition) {
         IBlockData iblockdata = this.level.getBlockState(blockposition);
+        // CraftBukkit start - fire BlockBreakEvent
+        org.bukkit.block.Block bblock = CraftBlock.at(level, blockposition);
+        BlockBreakEvent event = null;
+
+        if (this.player instanceof EntityPlayer) {
+            // Sword + Creative mode pre-cancel
+            boolean isSwordNoBreak = !this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player);
+
+            // Tell client the block is gone immediately then process events
+            // Don't tell the client if its a creative sword break because its not broken!
+            if (level.getBlockEntity(blockposition) == null && !isSwordNoBreak) {
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(blockposition, Blocks.AIR.defaultBlockState());
+                this.player.connection.send(packet);
+            }
+
+            event = new BlockBreakEvent(bblock, this.player.getBukkitEntity());
+
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(isSwordNoBreak);
+
+            // Calculate default block experience
+            IBlockData nmsData = this.level.getBlockState(blockposition);
+            Block nmsBlock = nmsData.getBlock();
+
+            ItemStack itemstack = this.player.getItemBySlot(EnumItemSlot.MAINHAND);
+
+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.player.hasCorrectToolForDrops(nmsBlock.defaultBlockState())) {
+                event.setExpToDrop(nmsBlock.getExpDrop(nmsData, this.level, blockposition, itemstack, true));
+            }
+
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                if (isSwordNoBreak) {
+                    return false;
+                }
+                // Let the client know the block still exists
+                this.player.connection.send(new PacketPlayOutBlockChange(this.level, blockposition));
 
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player)) {
+                // Brute force all possible updates
+                for (EnumDirection dir : EnumDirection.values()) {
+                    this.player.connection.send(new PacketPlayOutBlockChange(level, blockposition.relative(dir)));
+                }
+
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.level.getBlockEntity(blockposition);
+                if (tileentity != null) {
+                    this.player.connection.send(tileentity.getUpdatePacket());
+                }
+                return false;
+            }
+        }
+        // CraftBukkit end
+
+        if (false && !this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player)) { // CraftBukkit - false
             return false;
         } else {
+            iblockdata = this.level.getBlockState(blockposition); // CraftBukkit - update state from plugins
+            if (iblockdata.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
             TileEntity tileentity = this.level.getBlockEntity(blockposition);
             Block block = iblockdata.getBlock();
 
@@ -248,6 +387,10 @@
             } else if (this.player.blockActionRestricted(this.level, blockposition, this.gameModeForPlayer)) {
                 return false;
             } else {
+                // CraftBukkit start
+                org.bukkit.block.BlockState state = bblock.getState();
+                level.captureDrops = new ArrayList<>();
+                // CraftBukkit end
                 block.playerWillDestroy(this.level, blockposition, iblockdata, this.player);
                 boolean flag = this.level.removeBlock(blockposition, false);
 
@@ -256,19 +399,32 @@
                 }
 
                 if (this.isCreative()) {
-                    return true;
+                    // return true; // CraftBukkit
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
                     boolean flag1 = this.player.hasCorrectToolForDrops(iblockdata);
 
                     itemstack.mineBlock(this.level, iblockdata, blockposition, this.player);
-                    if (flag && flag1) {
+                    if (flag && flag1 && event.isDropItems()) { // CraftBukkit - Check if block should drop items
                         block.playerDestroy(this.level, this.player, blockposition, iblockdata, tileentity, itemstack1);
                     }
 
-                    return true;
+                    // return true; // CraftBukkit
+                }
+                // CraftBukkit start
+                if (event.isDropItems()) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, level.captureDrops);
                 }
+                level.captureDrops = null;
+
+                // Drop event experience
+                if (flag && event != null) {
+                    iblockdata.getBlock().popExperience(this.level, blockposition, event.getExpToDrop());
+                }
+
+                return true;
+                // CraftBukkit end
             }
         }
     }
@@ -313,14 +469,54 @@

